#!/usr/bin/env python
# Using Google maps API to get the current time at a given location

from time import time, gmtime, strftime
import json
import sys

if sys.version_info[:2] >= (3, 0):
    from urllib.request import urlopen
    from urllib.parse import urlencode
else:
    from urllib import urlopen, urlencode

api_base = 'https://maps.googleapis.com/maps/api'
geo_url = '{}/geocode/json'.format(api_base)
tz_url = '{}/timezone/json'.format(api_base)


def get_json(url):
    fo = urlopen(url)
    data = fo.read().decode('utf-8')
    return json.loads(data)


def timeat(location):
    query = urlencode([('address', location)])
    url = '{}?{}'.format(geo_url, query)
    loc_resp = get_json(url)
    if loc_resp['status'] != 'OK':
        return

    now = int(time())
    for loc in loc_resp['results']:
        geo = loc['geometry']['location']
        query = urlencode([
            ('timestamp', str(now)),
            ('location', '{},{}'.format(geo['lat'], geo['lng'])),
        ])
        url = '{}?{}'.format(tz_url, query)
        tz = get_json(url)

        local = gmtime(now + tz['dstOffset'] + tz['rawOffset'])
        yield loc['formatted_address'], strftime('%a %b %d, %Y %H:%M', local)


def main(argv=None):
    import sys
    from argparse import ArgumentParser

    argv = argv or sys.argv

    parser = ArgumentParser()
    parser.add_argument('location', help='location to get time at')
    args = parser.parse_args(argv[1:])

    try:
        n = 0
        for n, (addr, time) in enumerate(timeat(args.location), 1):
            print('{}: {}'.format(addr, time))

        if n == 0:
            raise SystemExit(
                'error: cannot find time for `{}`'.format(args.location))

    except IOError as e:
        raise SystemExit('error: {}'.format(e))

if __name__ == '__main__':
    main()
