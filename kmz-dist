#!/usr/bin/env python

'''
'''

from collections import namedtuple
from math import sqrt
from zipfile import ZipFile, BadZipfile
import xml.etree.ElementTree as et

namespaces = {'gx': 'http://www.google.com/kml/ext/2.2'}
Coord = namedtuple('Coord', ['lat', 'lng'])


def elem2coord(elem):
    # '35.014666 32.519769 144.1999969482422' -> (35.014666, 32.519769)
    lat, lng, _ = [float(v) for v in elem.text.split()]
    return Coord(lat, lng)


def dist(coord1, coord2):
    # FIXME: This is totally wrong.
    # See distance calculation at
    # http://www.movable-type.co.uk/scripts/latlong.html
    dlat = coord1.lat - coord2.lat
    dlng = coord1.lng - coord2.lng

    return sqrt(dlat*dlat + dlng*dlng)


def kmz_dist(file):
    zfo = ZipFile(file)
    fo = zfo.open(zfo.filelist[0].filename)

    root = et.parse(fo).getroot()
    elems = root.iterfind('.//gx:coord', namespaces=namespaces)
    coords = [elem2coord(elem) for elem in elems]

    # Shift the coords list and then zip with itself, we'll get a list of
    # tuples like [(coord1, coord2), (coord2, coord3) ...]
    return sum(dist(c1, c2) for c1, c2 in zip(coords, coords[1:]))


if __name__ == '__main__':
    from argparse import ArgumentParser
    from sys import stdin

    parser = ArgumentParser(
        description='calculate length of path in .kmz file')
    parser.add_argument('kmz', help='kmz file name', default='-', nargs='?')
    args = parser.parse_args()

    file = stdin if args.kmz == '-' else args.kmz
    try:
        print(kmz_dist(file))
    except (IOError, BadZipfile) as err:
        raise SystemExit('error: {}'.format(err))
